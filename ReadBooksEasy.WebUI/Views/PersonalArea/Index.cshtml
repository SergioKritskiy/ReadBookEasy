@model IEnumerable<ReadBooksEasy.Domain.Entities.Book>
@{
    ViewBag.Title = "Personal Area";
    Layout = "~/Views/Shared/_PersonalArea.cshtml";
}
<head>
    <title>Personal Area</title>
    <style type="text/css">
        html, body {
            height: 100%;
        }

                DIV.item {
            border-top: 1px dotted gray;
            padding-top: .7em;
            margin-bottom: .7em;

        }

            DIV.item:first-child {
                border-top: 1px dotted gray;
                padding-top:.7em;

            }

            DIV.item H3 {
                font-size: 1.3em;
                margin: 0 0 .25em 0;
            }

            DIV.item H4 {
                font-size: 1.1em;
                margin: .4em 0 0 0;
            }

        BODY {
            font-family: Cambria, Georgia, "Times New Roman";
            margin: 0;
        }

        DIV#header DIV.title, DIV.item H3, DIV.item H4, DIV.pager A {
            font: bold 1em "Arial Narrow", "Franklin Gothic Medium", Arial;
        }

        DIV#header {
            background-color: #444;
            border-bottom: 2px solid #111;
            color: White;
        }

            DIV#header DIV.title {
                font-size: 2em;
                padding: .6em;
            }

        DIV#content {
            border-left: 7px ridge gray;
            margin-left: 19em;
            padding: 1em;
            height:100%;
        }

        DIV#bookmark {
            /*margin-left: 30px;*/
            float: left;
            width: 18em;
            padding: .3em;
            height:100%;
            background-color: #efeeef; 
        }
        DIV#bookmarkItems {
            padding-left: 1em;
            float: left;
            width: 17em;
        }



        DIV.pager {
            text-align: right;
            border-top: 2px solid silver;
            padding: .5em 0 0 0;
            margin-top: 1em;
        }

            DIV.pager A {
                font-size: 1.1em;
                color: #666;
                text-decoration: none;
                padding: 0 .4em 0 .4em;
            }

                DIV.pager A:hover {
                    background-color: Silver;
                }

                DIV.pager A.selected {
                    background-color: #353535;
                    color: White;
                }
        div#TypeOfBooks {
        width:100%;
        /*background-color:#ffd800;*/
        }

        DIV#TypeOfBooks A {   
            font: bold 1.1em "Arial Narrow","Franklin Gothic Medium",Arial; 
            display: inline;   
            text-decoration: none; 
            padding: .6em; 
            color: Black;   
            text-align: center;
            border: 1px solid silver; 
            } 
        DIV#TypeOfBooks A.selected { background-color: #666; color: White; } 
        DIV#TypeOfBooks A:hover { background-color: #CCC; } 
        DIV#TypeOfBooks A.selected:hover { background-color: #666; }
    </style>

</head>
<div id="bookmark">
    <p style="text-align:center">Bookmark</p>
    <div id="bookmarkItems">
        text<br>text
    </div>
    </div>
<div id="content" ng-app="personalArea" ng-controller="book">
    <div id="TypeOfBooks">
        <a id="AllBooks" style="float:left;width:35%;" ng-click="getAllbook()">All Books</a>
        <!--Html.ActionLink("All Books", "Index", new { Own = 0 }, new { style = "float:left;width:35%;", id="AllBooks" }) -->
        <a id="YourBook" style="float:left;width:34%;" ng-click="getUsersBook()">Your books</a>
        <!--Html.ActionLink("Your books", "IndexJson", new { Own = 1 }, new { style = "float:left;width:35%;", id = "YourBook" })-->
        @Html.ActionLink("Add your book", "AddBook", null, new { @style = "float:right;width:25%;", id = "AddBook" })
    </div>

    <h3>List of books</h3>
    <div>
        <div class="item" ng-repeat="b in books">
            <ul>
                <li hidden>Id of book= {{b.idBook}} </li>
                <li>Name of book {{b.nameOfBook}} </li>
                <li>Genre of book {{b.genreOfBook}} </li>
                <li>Rating of book {{b.ratingOfBook}} </li>
                <li>
                    <a href="/PersonalArea/ShowPdf?idOfBook={{b.idBook}}"> Show Book </a>
                </li>
                <li>
                    <a ng-click="AddBookToUserPlaylist(b.idBook); ShowPersonalBookOrNot();" ng-hide="personalArea"> ++ </a> <a ng-click="ShowPersonalBookOrNot(); RemoveBookFromUserPlaylist(b.idBook); " ng-show="personalArea"> -- </a>
                </li>
            </ul>
        </div>
        <span ng-show="countOfUserBooks==0">You has {{countOfUserBooks}} books in your 'playlist'. Add book by click '++'</span>
        
    </div>
    <script type="text/javascript">
        var app = angular.module("personalArea", []);
        app.controller("book", function ($scope, $http) {
            $http.get("/PersonalArea/IndexJson?own=0").then(function (response) {
                $scope.books = response.data;
                });
            $scope.countOfUserBooks = -1;
            $scope.personalArea = false;
          /*  $scope.books = [{ "idBook": 2, "nameOfBook": "Asp.Net", "genreOfBook": "Sci", "fileOfBook": null, "ratingOfBook": 5, "Bookmarks": null, "UsersBooks": null }, { "idBook": 3, "nameOfBook": "Jquiery", "genreOfBook": "Sci", "fileOfBook": null, "ratingOfBook": 5, "Bookmarks": null, "UsersBooks": null }]; */

                /*[{ "idBook": 2, "nameOfBook": "Asp.Net", "genreOfBook": "Sci", "fileOfBook": null, "ratingOfBook": 5, "Bookmarks": null, "UsersBooks": null }, { "idBook": 3, "nameOfBook": "Jquiery", "genreOfBook": "Sci", "fileOfBook": null, "ratingOfBook": 5, "Bookmarks": null, "UsersBooks": null }, { "idBook": 12, "nameOfBook": "lol", "genreOfBook": "j", "fileOfBook": null, "ratingOfBook": null, "Bookmarks": null, "UsersBooks": null }, { "idBook": 13, "nameOfBook": "nerd", "genreOfBook": "genre", "fileOfBook": null, "ratingOfBook": null, "Bookmarks": null, "UsersBooks": null }]; */

            $scope.getAllbook = getAllbook;
            function getAllbook() {
                $http.get('/PersonalArea/IndexJson?own=0').success(function (data) {
                    $scope.books = data;
                    $scope.personalArea = false;
                    //SetPersonalAreaOrNot();
                });

              /*  $.ajax({
                    url: "/PersonalArea/IndexJson",
                    type: "GET",
                    data: $.param({ own: 0 }),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        $scope.books = data;
                    }
                });*/ 
            };
            $scope.getUsersBook = getUsersBook;
            function getUsersBook() {
                $http.get('/PersonalArea/IndexJson?own=1').success(function (data) {
                    $scope.books = data;// Update Model-- Line X
                    $scope.countOfUserBooks = data.length;
                    $scope.personalArea = true;
                    //SetPersonalAreaOrNot();
                });
           /*     $.ajax({
                    url: "/PersonalArea/IndexJson",
                    type: "GET",
                    data: $.param({ own: 1 }),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        $scope.books = data;
                    }
                }); */
            };

            $scope.AddBookToUserPlaylist = AddBookToUserPlaylist;
            function AddBookToUserPlaylist(idOfBook) {
                $http.get('/PersonalArea/AddBookToUserPlaylist?idOfBook='+idOfBook+'').success(function (data) {
                });
            };

            $scope.RemoveBookFromUserPlaylist = RemoveBookFromUserPlaylist;
            function RemoveBookFromUserPlaylist(idOfBook) {
                $http.get('/PersonalArea/RemoveBookFromUserPlaylist?idOfBook=' + idOfBook + '').success(function (data) {
                });
            };
            $scope.SetPersonalAreaOrNot = SetPersonalAreaOrNot;
            function SetPersonalAreaOrNot() {
                if ($scope.personalArea) {
                    $scope.personalArea = false;
                }
                else {
                    $scope.personalArea = true;
                }
            };

            $scope.ShowPersonalBookOrNot = ShowPersonalBookOrNot;
            function ShowPersonalBookOrNot() {
                if ($scope.personalArea) {
                    $http.get('/PersonalArea/IndexJson?own=1').success(function (data) {
                        $scope.books = data;// Update Model-- Line X
                        $scope.countOfUserBooks = data.length;
                    });
                    $scope.getUsersBook();
                }
                else {
                    $scope.getAllbook();
                }
            };

            $scope.getAllbook();
        });

        $(document).ready(function () {


            /*          $('#AllBooks').click(function () {
                $.ajax({
                    url: "/PersonalArea/IndexJson",
                    type: "GET",
                    data: $.param({ own: 0 }),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        alert(data[0].idBook);
                        selectedbooks = data;
                    }
                });
            });

          $('#YourBook').click(function () {
                $.ajax({
                    url: "/PersonalArea/IndexJson",
                    type: "GET",
                    data: $.param({ own: 1 }),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        alert(data[0].idBook);
                        selectedbooks = data;
                    }
                });
            }); */
        });
    </script>

</div>
